#!/bin/bash

DIR="$( cd -P "$( dirname "$0" )" && pwd )"

# Import functions
. $DIR/_fn

usage() {
	cat <<-EOF

  Usage: $0 [options]

  Options:
    -e <production|staging>  Environment
    -h                       Show usage

EOF
exit 0
}

# Go to project root
cd $DIR
cd ..

CURR_FOLDER="$( pwd )"
OPT="staging"

while getopts ":e:" o
do
	case ${o} in
		e) [ $OPTARG = "staging" -o $OPTARG = "production" ] && OPT=$OPTARG || usage ;;
		*) usage ;;
	esac
done

if test -z ${OPT}; then
	abort "Missing environment"
fi

# ENV File
load_env $CURR_FOLDER $OPT

## Variables
REGISTRY_USER="$( cat ${CURR_FOLDER}/.registry-user )"
REGISTRY_PASSWD="$( cat ${CURR_FOLDER}/.registry-passwd )"
TAG_IMAGE="${REGISTRY}/${IMAGE}:${VERSION}"

## Build
docker build \
	--build-arg NODE_ENV=${NODE_ENV} \
	--build-arg APP_ENV=${APP_ENV} \
	--build-arg APP_NS=${APP_NS} \
	--build-arg VERSION=${VERSION} \
	--compress --force-rm --no-cache . --tag $TAG_IMAGE
test $? -ne 0 && abort "Falha no build da image --> ${build}" || ok "Build image ok --> ${build}"

## Push (Send image to Registry)
cat ${CURR_FOLDER}/.registry-passwd | docker login $REGISTRY --username $REGISTRY_USER --password-stdin
docker push $TAG_IMAGE

# Cleanup
# docker rmi $(docker images -q -f "dangling=true" -f "label=autodelete=true")

ok "Build finalizado... Yeahh!!!"

exit 0
